
AVRASM ver. 2.1.30  C:\_uni\term7\Lab_Micro\S02_Ghazaleh_Zehtab\codevision\Debug\List\s02.asm Mon Oct 12 00:47:14 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0033 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
00002f 000a      	.DW  0x0A
000030 0160      	.DW  _sevenseg
000031 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000032 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000033 94f8      	CLI
000034 27ee      	CLR  R30
000035 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000036 e0f1      	LDI  R31,1
000037 bffb      	OUT  GICR,R31
000038 bfeb      	OUT  GICR,R30
000039 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003a e08d      	LDI  R24,(14-2)+1
00003b e0a2      	LDI  R26,2
00003c 27bb      	CLR  R27
                 __CLEAR_REG:
00003d 93ed      	ST   X+,R30
00003e 958a      	DEC  R24
00003f f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000040 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000041 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000042 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000043 93ed      	ST   X+,R30
000044 9701      	SBIW R24,1
000045 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000046 e5ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000047 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000048 9185      	LPM  R24,Z+
000049 9195      	LPM  R25,Z+
00004a 9700      	SBIW R24,0
00004b f061      	BREQ __GLOBAL_INI_END
00004c 91a5      	LPM  R26,Z+
00004d 91b5      	LPM  R27,Z+
00004e 9005      	LPM  R0,Z+
00004f 9015      	LPM  R1,Z+
000050 01bf      	MOVW R22,R30
000051 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000052 9005      	LPM  R0,Z+
000053 920d      	ST   X+,R0
000054 9701      	SBIW R24,1
000055 f7e1      	BRNE __GLOBAL_INI_LOOP
000056 01fb      	MOVW R30,R22
000057 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000058 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000059 bfed      	OUT  SPL,R30
00005a e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005b bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00005c e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00005d e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00005e 940c 0060 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * s02.c
                 ; *
                 ; * Created: 10/5/2020 8:56:50 PM
                 ; * Author: Ghazaleh Zehtab
                 ; * Subject: Working with header files
                 ; * Each question has its own header and source file named questionx.
                 ; * In question6.c all other files are called and this function called is main.
                 ; */
                 ;
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;unsigned char sevenseg[]=
                 ;    {
                 ;
                 ;        0b00111111,  //0
                 ;        0b00000110,  //1
                 ;        0b01011011,  //2
                 ;        0b01001111, //3
                 ;        0b01100110, //4
                 ;        0b01101101, //5
                 ;        0b01111101, //6
                 ;        0b0000111,  //7
                 ;        0b01111111, //8
                 ;        0b01101111 //9
                 ;
                 ;    };
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 001C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 001D 
                 ; 0000 001E     // Please write your application code here
                 ; 0000 001F    CallAll(); //question6
000060 940e 023f 	CALL _CallAll
                 ; 0000 0020 }
                 _0x4:
000062 cfff      	RJMP _0x4
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;//question 1
                 ;void LED_ON_OFF(unsigned int NumberOfOn,char OutPort,unsigned int timer){
                 ; 0001 0003 void LED_ON_OFF(unsigned int NumberOfOn,char OutPort,unsigned int timer){
                 
                 	.CSEG
                 _LED_ON_OFF:
                 ; .FSTART _LED_ON_OFF
                 ; 0001 0004 
                 ; 0001 0005     unsigned int i; //integer as counter
                 ; 0001 0006     switch(OutPort){
000063 93ba      	ST   -Y,R27
000064 93aa      	ST   -Y,R26
000065 931a      	ST   -Y,R17
000066 930a      	ST   -Y,R16
                 ;	NumberOfOn -> Y+5
                 ;	OutPort -> Y+4
                 ;	timer -> Y+2
                 ;	i -> R16,R17
000067 81ec      	LDD  R30,Y+4
000068 e0f0      	LDI  R31,0
                 ; 0001 0007 
                 ; 0001 0008         case 0:
000069 9730      	SBIW R30,0
00006a f499      	BRNE _0x20006
                 ; 0001 0009             DDRA=0xFF;       // define port A as output
00006b efef      	LDI  R30,LOW(255)
00006c bbea      	OUT  0x1A,R30
                 ; 0001 000A             for(i=0;i<NumberOfOn;i++)
                +
00006d e000     +LDI R16 , LOW ( 0 )
00006e e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20008:
00006f 940e 0263 	CALL SUBOPT_0x0
000071 f458      	BRSH _0x20009
                 ; 0001 000B             {
                 ; 0001 000C                 PORTA=0xFF;      //turn on all portA
000072 efef      	LDI  R30,LOW(255)
000073 bbeb      	OUT  0x1B,R30
                 ; 0001 000D                 delay_ms(timer);  //delay
000074 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 000E                 PORTA=0x00;     //turn off the portA
000076 e0e0      	LDI  R30,LOW(0)
000077 bbeb      	OUT  0x1B,R30
                 ; 0001 000F                 delay_ms(timer);
000078 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0010             }
                +
00007a 5f0f     +SUBI R16 , LOW ( - 1 )
00007b 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00007c cff2      	RJMP _0x20008
                 _0x20009:
                 ; 0001 0011 
                 ; 0001 0012         case 1:
00007d c004      	RJMP _0x2000A
                 _0x20006:
00007e 30e1      	CPI  R30,LOW(0x1)
00007f e0a0      	LDI  R26,HIGH(0x1)
000080 07fa      	CPC  R31,R26
000081 f499      	BRNE _0x2000B
                 _0x2000A:
                 ; 0001 0013             DDRB=0xFF;       // define port B as output
000082 efef      	LDI  R30,LOW(255)
000083 bbe7      	OUT  0x17,R30
                 ; 0001 0014             for(i=0;i<NumberOfOn;i++)
                +
000084 e000     +LDI R16 , LOW ( 0 )
000085 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2000D:
000086 940e 0263 	CALL SUBOPT_0x0
000088 f458      	BRSH _0x2000E
                 ; 0001 0015             {
                 ; 0001 0016                 PORTB=0xFF;      //turn on all portB
000089 efef      	LDI  R30,LOW(255)
00008a bbe8      	OUT  0x18,R30
                 ; 0001 0017                 delay_ms(timer);  //delay
00008b 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0018                 PORTB=0x00;     //turn off the portB
00008d e0e0      	LDI  R30,LOW(0)
00008e bbe8      	OUT  0x18,R30
                 ; 0001 0019                 delay_ms(timer);
00008f 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 001A             }
                +
000091 5f0f     +SUBI R16 , LOW ( - 1 )
000092 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000093 cff2      	RJMP _0x2000D
                 _0x2000E:
                 ; 0001 001B         case 2:
000094 c004      	RJMP _0x2000F
                 _0x2000B:
000095 30e2      	CPI  R30,LOW(0x2)
000096 e0a0      	LDI  R26,HIGH(0x2)
000097 07fa      	CPC  R31,R26
000098 f499      	BRNE _0x20010
                 _0x2000F:
                 ; 0001 001C             DDRC=0xFF;       // define port C as output
000099 efef      	LDI  R30,LOW(255)
00009a bbe4      	OUT  0x14,R30
                 ; 0001 001D             for(i=0;i<NumberOfOn;i++)
                +
00009b e000     +LDI R16 , LOW ( 0 )
00009c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20012:
00009d 940e 0263 	CALL SUBOPT_0x0
00009f f458      	BRSH _0x20013
                 ; 0001 001E             {
                 ; 0001 001F                 PORTC=0xFF;      //turn on all portC
0000a0 efef      	LDI  R30,LOW(255)
0000a1 bbe5      	OUT  0x15,R30
                 ; 0001 0020                 delay_ms(timer);  //delay
0000a2 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0021                 PORTC=0x00;     //turn off the portC
0000a4 e0e0      	LDI  R30,LOW(0)
0000a5 bbe5      	OUT  0x15,R30
                 ; 0001 0022                 delay_ms(timer);
0000a6 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0023             }
                +
0000a8 5f0f     +SUBI R16 , LOW ( - 1 )
0000a9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000aa cff2      	RJMP _0x20012
                 _0x20013:
                 ; 0001 0024         case 3:
0000ab c004      	RJMP _0x20014
                 _0x20010:
0000ac 30e3      	CPI  R30,LOW(0x3)
0000ad e0a0      	LDI  R26,HIGH(0x3)
0000ae 07fa      	CPC  R31,R26
0000af f491      	BRNE _0x20019
                 _0x20014:
                 ; 0001 0025             DDRD=0xFF;       // define port D as output
0000b0 efef      	LDI  R30,LOW(255)
0000b1 bbe1      	OUT  0x11,R30
                 ; 0001 0026             for(i=0;i<NumberOfOn;i++)
                +
0000b2 e000     +LDI R16 , LOW ( 0 )
0000b3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20017:
0000b4 940e 0263 	CALL SUBOPT_0x0
0000b6 f458      	BRSH _0x20018
                 ; 0001 0027             {
                 ; 0001 0028                 PORTD=0xFF;      //turn on all portD
0000b7 efef      	LDI  R30,LOW(255)
0000b8 bbe2      	OUT  0x12,R30
                 ; 0001 0029                 delay_ms(timer);  //delay
0000b9 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 002A                 PORTD=0x00;     //turn off the portD
0000bb e0e0      	LDI  R30,LOW(0)
0000bc bbe2      	OUT  0x12,R30
                 ; 0001 002B                 delay_ms(timer);
0000bd 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 002C             }
                +
0000bf 5f0f     +SUBI R16 , LOW ( - 1 )
0000c0 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000c1 cff2      	RJMP _0x20017
                 _0x20018:
                 ; 0001 002D         default:
                 _0x20019:
                 ; 0001 002E             DDRB=0xFF;       // define port B as output
0000c2 efef      	LDI  R30,LOW(255)
0000c3 bbe7      	OUT  0x17,R30
                 ; 0001 002F             for(i=0;i<NumberOfOn;i++)
                +
0000c4 e000     +LDI R16 , LOW ( 0 )
0000c5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x2001B:
0000c6 940e 0263 	CALL SUBOPT_0x0
0000c8 f458      	BRSH _0x2001C
                 ; 0001 0030             {
                 ; 0001 0031                 PORTB=0xFF;      //turn on all portB
0000c9 efef      	LDI  R30,LOW(255)
0000ca bbe8      	OUT  0x18,R30
                 ; 0001 0032                 delay_ms(timer);  //delay
0000cb 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0033                 PORTB=0x00;     //turn off the portB
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bbe8      	OUT  0x18,R30
                 ; 0001 0034                 delay_ms(timer);
0000cf 940e 0268 	CALL SUBOPT_0x1
                 ; 0001 0035             }
                +
0000d1 5f0f     +SUBI R16 , LOW ( - 1 )
0000d2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000d3 cff2      	RJMP _0x2001B
                 _0x2001C:
                 ; 0001 0036     }
                 ; 0001 0037 
                 ; 0001 0038 }
0000d4 8119      	LDD  R17,Y+1
0000d5 8108      	LDD  R16,Y+0
0000d6 9627      	ADIW R28,7
0000d7 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//question2
                 ;
                 ;void DancingLight(unsigned int StartPoint,unsigned int timer){
                 ; 0002 0005 void DancingLight(unsigned int StartPoint,unsigned int timer){
                 
                 	.CSEG
                 _DancingLight:
                 ; .FSTART _DancingLight
                 ; 0002 0006 
                 ; 0002 0007     unsigned int i; //integer as counter
                 ; 0002 0008     unsigned int j;
                 ; 0002 0009     unsigned int num;
                 ; 0002 000A     num=1;
0000d8 93ba      	ST   -Y,R27
0000d9 93aa      	ST   -Y,R26
0000da 940e 041a 	CALL __SAVELOCR6
                 ;	StartPoint -> Y+8
                 ;	timer -> Y+6
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	num -> R20,R21
                +
0000dc e041     +LDI R20 , LOW ( 1 )
0000dd e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0002 000B     DDRB=0xFF;       // define port B as output
0000de efef      	LDI  R30,LOW(255)
0000df bbe7      	OUT  0x17,R30
                 ; 0002 000C     timer /= 20;
0000e0 81ae      	LDD  R26,Y+6
0000e1 81bf      	LDD  R27,Y+6+1
0000e2 e1e4      	LDI  R30,LOW(20)
0000e3 e0f0      	LDI  R31,HIGH(20)
0000e4 940e 03ed 	CALL __DIVW21U
0000e6 83ee      	STD  Y+6,R30
0000e7 83ff      	STD  Y+6+1,R31
                 ; 0002 000D     for(j=0;j<StartPoint;j++){
                +
0000e8 e020     +LDI R18 , LOW ( 0 )
0000e9 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x40004:
0000ea 85e8      	LDD  R30,Y+8
0000eb 85f9      	LDD  R31,Y+8+1
0000ec 172e      	CP   R18,R30
0000ed 073f      	CPC  R19,R31
0000ee f428      	BRSH _0x40005
                 ; 0002 000E         num=num*2;
0000ef 940e 026c 	CALL SUBOPT_0x2
                 ; 0002 000F     }
                +
0000f1 5f2f     +SUBI R18 , LOW ( - 1 )
0000f2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000f3 cff6      	RJMP _0x40004
                 _0x40005:
                 ; 0002 0010     for(i=0;i<20;i++)
                +
0000f4 e000     +LDI R16 , LOW ( 0 )
0000f5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x40007:
                +
0000f6 3104     +CPI R16 , LOW ( 20 )
0000f7 e0e0     +LDI R30 , HIGH ( 20 )
0000f8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
0000f9 f480      	BRSH _0x40008
                 ; 0002 0011     {
                 ; 0002 0012        PORTB=num;      //turn on all portB
0000fa bb48      	OUT  0x18,R20
                 ; 0002 0013        delay_ms(timer);
0000fb 81ae      	LDD  R26,Y+6
0000fc 81bf      	LDD  R27,Y+6+1
0000fd 940e 029d 	CALL _delay_ms
                 ; 0002 0014        num = num * 2;    // turn on next LED
0000ff 940e 026c 	CALL SUBOPT_0x2
                 ; 0002 0015        if (num > 128){    //if last on in ON back to the beginig
                +
000101 3841     +CPI R20 , LOW ( 129 )
000102 e0e0     +LDI R30 , HIGH ( 129 )
000103 075e     +CPC R21 , R30
                 	__CPWRN 20,21,129
000104 f010      	BRLO _0x40009
                 ; 0002 0016         num= 1;
                +
000105 e041     +LDI R20 , LOW ( 1 )
000106 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
                 ; 0002 0017        }
                 ; 0002 0018     }
                 _0x40009:
                +
000107 5f0f     +SUBI R16 , LOW ( - 1 )
000108 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000109 cfec      	RJMP _0x40007
                 _0x40008:
                 ; 0002 0019 }
00010a 940e 0421 	CALL __LOADLOCR6
00010c 962a      	ADIW R28,10
00010d 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void DiplayPortx_onLEDs(unsigned int inport, unsigned int outport){
                 ; 0003 0003 void DiplayPortx_onLEDs(unsigned int inport, unsigned int outport){
                 
                 	.CSEG
                 _DiplayPortx_onLEDs:
                 ; .FSTART _DiplayPortx_onLEDs
                 ; 0003 0004 
                 ; 0003 0005     unsigned int Myinport=0;
                 ; 0003 0006     unsigned int p=0;
                 ; 0003 0007     switch(inport){
00010e 93ba      	ST   -Y,R27
00010f 93aa      	ST   -Y,R26
000110 940e 041c 	CALL __SAVELOCR4
                 ;	inport -> Y+6
                 ;	outport -> Y+4
                 ;	Myinport -> R16,R17
                 ;	p -> R18,R19
                +
000112 e000     +LDI R16 , LOW ( 0 )
000113 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000114 e020     +LDI R18 , LOW ( 0 )
000115 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
000116 81ee      	LDD  R30,Y+6
000117 81ff      	LDD  R31,Y+6+1
                 ; 0003 0008 
                 ; 0003 0009         case 0:
000118 9730      	SBIW R30,0
000119 f421      	BRNE _0x60006
                 ; 0003 000A             DDRA=0x00;
00011a e0e0      	LDI  R30,LOW(0)
00011b bbea      	OUT  0x1A,R30
                 ; 0003 000B             Myinport = PINA;
00011c b309      	IN   R16,25
00011d c017      	RJMP _0x60022
                 ; 0003 000C             break;
                 ; 0003 000D 
                 ; 0003 000E         case 1:
                 _0x60006:
00011e 30e1      	CPI  R30,LOW(0x1)
00011f e0a0      	LDI  R26,HIGH(0x1)
000120 07fa      	CPC  R31,R26
000121 f081      	BREQ _0x60023
                 ; 0003 000F 
                 ; 0003 0010             DDRB=0x00;       // define port B as input
                 ; 0003 0011             Myinport = PINB;
                 ; 0003 0012             break;
                 ; 0003 0013 
                 ; 0003 0014         case 2:
000122 30e2      	CPI  R30,LOW(0x2)
000123 e0a0      	LDI  R26,HIGH(0x2)
000124 07fa      	CPC  R31,R26
000125 f421      	BRNE _0x60008
                 ; 0003 0015             DDRC=0x00;       // define port C as output
000126 e0e0      	LDI  R30,LOW(0)
000127 bbe4      	OUT  0x14,R30
                 ; 0003 0016             Myinport = PINC;
000128 b303      	IN   R16,19
000129 c00b      	RJMP _0x60022
                 ; 0003 0017             break;
                 ; 0003 0018 
                 ; 0003 0019         case 3:
                 _0x60008:
00012a 30e3      	CPI  R30,LOW(0x3)
00012b e0a0      	LDI  R26,HIGH(0x3)
00012c 07fa      	CPC  R31,R26
00012d f421      	BRNE _0x6000A
                 ; 0003 001A             DDRD=0x00;       // define port D as output
00012e e0e0      	LDI  R30,LOW(0)
00012f bbe1      	OUT  0x11,R30
                 ; 0003 001B             Myinport = PIND;
000130 b300      	IN   R16,16
000131 c003      	RJMP _0x60022
                 ; 0003 001C             break;
                 ; 0003 001D         default:
                 _0x6000A:
                 ; 0003 001E 
                 ; 0003 001F             DDRB=0x00;       // define port B as output
                 _0x60023:
000132 e0e0      	LDI  R30,LOW(0)
000133 bbe7      	OUT  0x17,R30
                 ; 0003 0020             Myinport=PINB;
000134 b306      	IN   R16,22
                 _0x60022:
000135 2711      	CLR  R17
                 ; 0003 0021             break;
                 ; 0003 0022     }
                 ; 0003 0023     switch(outport){
000136 81ec      	LDD  R30,Y+4
000137 81fd      	LDD  R31,Y+4+1
                 ; 0003 0024 
                 ; 0003 0025         case 0:
000138 9730      	SBIW R30,0
000139 f469      	BRNE _0x6000E
                 ; 0003 0026             DDRA=0xFF;
00013a efef      	LDI  R30,LOW(255)
00013b bbea      	OUT  0x1A,R30
                 ; 0003 0027             while(p<3000){
                 _0x6000F:
                +
00013c 3b28     +CPI R18 , LOW ( 3000 )
00013d e0eb     +LDI R30 , HIGH ( 3000 )
00013e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3000
00013f f420      	BRSH _0x60011
                 ; 0003 0028                 PORTA=Myinport;
000140 bb0b      	OUT  0x1B,R16
                 ; 0003 0029                 p++;
000141 940e 0273 	CALL SUBOPT_0x3
                 ; 0003 002A                 delay_ms(1);
                 ; 0003 002B             }
000143 cff8      	RJMP _0x6000F
                 _0x60011:
                 ; 0003 002C             p=0;
                +
000144 e020     +LDI R18 , LOW ( 0 )
000145 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0003 002D             break;
000146 c037      	RJMP _0x6000D
                 ; 0003 002E         case 1:
                 _0x6000E:
000147 30e1      	CPI  R30,LOW(0x1)
000148 e0a0      	LDI  R26,HIGH(0x1)
000149 07fa      	CPC  R31,R26
00014a f459      	BRNE _0x60012
                 ; 0003 002F             DDRB=0xFF;
00014b efef      	LDI  R30,LOW(255)
00014c bbe7      	OUT  0x17,R30
                 ; 0003 0030             while(p<3000){
                 _0x60013:
                +
00014d 3b28     +CPI R18 , LOW ( 3000 )
00014e e0eb     +LDI R30 , HIGH ( 3000 )
00014f 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3000
000150 f420      	BRSH _0x60015
                 ; 0003 0031                 PORTB=Myinport;
000151 bb08      	OUT  0x18,R16
                 ; 0003 0032                 p++;
000152 940e 0273 	CALL SUBOPT_0x3
                 ; 0003 0033                 delay_ms(1);
                 ; 0003 0034             }
000154 cff8      	RJMP _0x60013
                 _0x60015:
                 ; 0003 0035             break;
000155 c028      	RJMP _0x6000D
                 ; 0003 0036         case 2:
                 _0x60012:
000156 30e2      	CPI  R30,LOW(0x2)
000157 e0a0      	LDI  R26,HIGH(0x2)
000158 07fa      	CPC  R31,R26
000159 f459      	BRNE _0x60016
                 ; 0003 0037             DDRC=0xFF;
00015a efef      	LDI  R30,LOW(255)
00015b bbe4      	OUT  0x14,R30
                 ; 0003 0038             while(p<3000){
                 _0x60017:
                +
00015c 3b28     +CPI R18 , LOW ( 3000 )
00015d e0eb     +LDI R30 , HIGH ( 3000 )
00015e 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3000
00015f f420      	BRSH _0x60019
                 ; 0003 0039                 PORTC=Myinport;
000160 bb05      	OUT  0x15,R16
                 ; 0003 003A                 p++;
000161 940e 0273 	CALL SUBOPT_0x3
                 ; 0003 003B                 delay_ms(1);
                 ; 0003 003C             }
000163 cff8      	RJMP _0x60017
                 _0x60019:
                 ; 0003 003D             break;
000164 c019      	RJMP _0x6000D
                 ; 0003 003E         case 3:
                 _0x60016:
000165 30e3      	CPI  R30,LOW(0x3)
000166 e0a0      	LDI  R26,HIGH(0x3)
000167 07fa      	CPC  R31,R26
000168 f459      	BRNE _0x6001E
                 ; 0003 003F             DDRD=0xFF;
000169 efef      	LDI  R30,LOW(255)
00016a bbe1      	OUT  0x11,R30
                 ; 0003 0040             while(p<3000){
                 _0x6001B:
                +
00016b 3b28     +CPI R18 , LOW ( 3000 )
00016c e0eb     +LDI R30 , HIGH ( 3000 )
00016d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3000
00016e f420      	BRSH _0x6001D
                 ; 0003 0041                 PORTD=Myinport;
00016f bb02      	OUT  0x12,R16
                 ; 0003 0042                 p++;
000170 940e 0273 	CALL SUBOPT_0x3
                 ; 0003 0043                 delay_ms(1);
                 ; 0003 0044             }
000172 cff8      	RJMP _0x6001B
                 _0x6001D:
                 ; 0003 0045             break;
000173 c00a      	RJMP _0x6000D
                 ; 0003 0046         default:
                 _0x6001E:
                 ; 0003 0047             DDRB=0xFF;
000174 efef      	LDI  R30,LOW(255)
000175 bbe7      	OUT  0x17,R30
                 ; 0003 0048             while(p<3000){
                 _0x6001F:
                +
000176 3b28     +CPI R18 , LOW ( 3000 )
000177 e0eb     +LDI R30 , HIGH ( 3000 )
000178 073e     +CPC R19 , R30
                 	__CPWRN 18,19,3000
000179 f420      	BRSH _0x60021
                 ; 0003 0049                 PORTB=Myinport;
00017a bb08      	OUT  0x18,R16
                 ; 0003 004A                 p++;
00017b 940e 0273 	CALL SUBOPT_0x3
                 ; 0003 004B                 delay_ms(1);
                 ; 0003 004C             }
00017d cff8      	RJMP _0x6001F
                 _0x60021:
                 ; 0003 004D             break;
                 ; 0003 004E     }
                 _0x6000D:
                 ; 0003 004F }
00017e 940e 0423 	CALL __LOADLOCR4
000180 9628      	ADIW R28,8
000181 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;//when AcOrDec is 1 means nine to zero when it's 0 mean zero to 1
                 ;
                 ;void  NineToZero(unsigned int descent){
                 ; 0004 0005 void  NineToZero(unsigned int descent){
                 
                 	.CSEG
                 _NineToZero:
                 ; .FSTART _NineToZero
                 ; 0004 0006     if(descent==0){
000182 93ba      	ST   -Y,R27
000183 93aa      	ST   -Y,R26
                 ;	descent -> Y+0
000184 81e8      	LD   R30,Y
000185 81f9      	LDD  R31,Y+1
000186 9730      	SBIW R30,0
000187 f4f9      	BRNE _0x80003
                 ; 0004 0007         DDRC=0xFF;
000188 940e 0279 	CALL SUBOPT_0x4
                 ; 0004 0008         DDRD=0x0F;
                 ; 0004 0009         DDRD.0=1;
                 ; 0004 000A         DDRD.1=1;
                 ; 0004 000B         DDRD.2=1;
                 ; 0004 000C         DDRD.3=1;
                 ; 0004 000D         PORTC=0b00111111;    //0
00018a e3ef      	LDI  R30,LOW(63)
00018b 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 000E         delay_ms(500);
                 ; 0004 000F         PORTC=0b00000110;    //1
00018d e0e6      	LDI  R30,LOW(6)
00018e 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0010         delay_ms(500);
                 ; 0004 0011         PORTC=0b01011011;    //2
000190 e5eb      	LDI  R30,LOW(91)
000191 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0012         delay_ms(500);
                 ; 0004 0013         PORTC=0b01001111;   //3
000193 e4ef      	LDI  R30,LOW(79)
000194 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0014         delay_ms(500);
                 ; 0004 0015         PORTC=0b01100110;   //4
000196 e6e6      	LDI  R30,LOW(102)
000197 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0016         delay_ms(500);
                 ; 0004 0017         PORTC=0b01101101;    //5
000199 e6ed      	LDI  R30,LOW(109)
00019a 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0018         delay_ms(500);
                 ; 0004 0019         PORTC=0b01111101;   //6
00019c e7ed      	LDI  R30,LOW(125)
00019d 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 001A         delay_ms(500);
                 ; 0004 001B         PORTC=0b0000111;   //7
00019f e0e7      	LDI  R30,LOW(7)
0001a0 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 001C         delay_ms(500);
                 ; 0004 001D         PORTC=0b01111111;    //8
0001a2 e7ef      	LDI  R30,LOW(127)
0001a3 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 001E         delay_ms(500);
                 ; 0004 001F         PORTC=0b01101111; //9
0001a5 e6ef      	LDI  R30,LOW(111)
0001a6 c01e      	RJMP _0x80015
                 ; 0004 0020         delay_ms(500);
                 ; 0004 0021     }
                 ; 0004 0022     else  {
                 _0x80003:
                 ; 0004 0023         DDRC=0xFF;
0001a7 940e 0279 	CALL SUBOPT_0x4
                 ; 0004 0024         DDRD=0x0F;
                 ; 0004 0025         DDRD.0=1;
                 ; 0004 0026         DDRD.1=1;
                 ; 0004 0027         DDRD.2=1;
                 ; 0004 0028         DDRD.3=1;
                 ; 0004 0029         PORTC=0b01101111; //9
0001a9 e6ef      	LDI  R30,LOW(111)
0001aa 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 002A         delay_ms(500);
                 ; 0004 002B         PORTC=0b01111111;    //8
0001ac e7ef      	LDI  R30,LOW(127)
0001ad 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 002C         delay_ms(500);
                 ; 0004 002D         PORTC=0b0000111;   //7
0001af e0e7      	LDI  R30,LOW(7)
0001b0 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 002E         delay_ms(500);
                 ; 0004 002F         PORTC=0b01111101;   //6
0001b2 e7ed      	LDI  R30,LOW(125)
0001b3 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0030         delay_ms(500);
                 ; 0004 0031         PORTC=0b01101101;    //5
0001b5 e6ed      	LDI  R30,LOW(109)
0001b6 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0032         delay_ms(500);
                 ; 0004 0033         PORTC=0b01100110;   //4
0001b8 e6e6      	LDI  R30,LOW(102)
0001b9 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0034         delay_ms(500);
                 ; 0004 0035         PORTC=0b01001111;   //3
0001bb e4ef      	LDI  R30,LOW(79)
0001bc 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0036         delay_ms(500);
                 ; 0004 0037         PORTC=0b01011011;    //2
0001be e5eb      	LDI  R30,LOW(91)
0001bf 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 0038         delay_ms(500);
                 ; 0004 0039         PORTC=0b00000110;    //1
0001c1 e0e6      	LDI  R30,LOW(6)
0001c2 940e 0282 	CALL SUBOPT_0x5
                 ; 0004 003A         delay_ms(500);
                 ; 0004 003B         PORTC=0b00111111;    //0
0001c4 e3ef      	LDI  R30,LOW(63)
                 _0x80015:
0001c5 bbe5      	OUT  0x15,R30
                 ; 0004 003C         delay_ms(500);
0001c6 efa4      	LDI  R26,LOW(500)
0001c7 e0b1      	LDI  R27,HIGH(500)
0001c8 940e 029d 	CALL _delay_ms
                 ; 0004 003D     }
                 ; 0004 003E }
0001ca 9622      	ADIW R28,2
0001cb 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void Reduce(float reducer){
                 ; 0005 0003 void Reduce(float reducer){
                 
                 	.CSEG
                 _Reduce:
                 ; .FSTART _Reduce
                 ; 0005 0004     unsigned int number=0;
                 ; 0005 0005     unsigned int numberCopy=0;
                 ; 0005 0006     unsigned int FirstDigit=0;
                 ; 0005 0007     unsigned int SecondDigit=0;
                 ; 0005 0008     unsigned int ThirdDigit=0;
                 ; 0005 0009     unsigned int Deci=0;        // after point
                 ; 0005 000A     DDRA=0x00;
0001cc 940e 0403 	CALL __PUTPARD2
0001ce 9726      	SBIW R28,6
0001cf e0e0      	LDI  R30,LOW(0)
0001d0 83e8      	ST   Y,R30
0001d1 83e9      	STD  Y+1,R30
0001d2 83ea      	STD  Y+2,R30
0001d3 83eb      	STD  Y+3,R30
0001d4 83ec      	STD  Y+4,R30
0001d5 83ed      	STD  Y+5,R30
0001d6 940e 041a 	CALL __SAVELOCR6
                 ;	reducer -> Y+12
                 ;	number -> R16,R17
                 ;	numberCopy -> R18,R19
                 ;	FirstDigit -> R20,R21
                 ;	SecondDigit -> Y+10
                 ;	ThirdDigit -> Y+8
                 ;	Deci -> Y+6
                +
0001d8 e000     +LDI R16 , LOW ( 0 )
0001d9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001da e020     +LDI R18 , LOW ( 0 )
0001db e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0001dc e040     +LDI R20 , LOW ( 0 )
0001dd e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001de bbea      	OUT  0x1A,R30
                 ; 0005 000B     DDRC=0xFF;
0001df efef      	LDI  R30,LOW(255)
0001e0 bbe4      	OUT  0x14,R30
                 ; 0005 000C     DDRD=0x00;
0001e1 e0e0      	LDI  R30,LOW(0)
0001e2 bbe1      	OUT  0x11,R30
                 ; 0005 000D     number= PINA;
0001e3 b309      	IN   R16,25
0001e4 2711      	CLR  R17
                 ; 0005 000E     numberCopy = number  *10;   //FOR making decimal easier
                +
0001e5 e0aa     +LDI R26 , 10
0001e6 9fa0     +MUL R26 , R16
0001e7 01f0     +MOVW R30 , R0
0001e8 9fa1     +MUL R26 , R17
0001e9 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,10
0001ea 019f      	MOVW R18,R30
                 ; 0005 000F     reducer *=10;
                +
0001eb 85ac     +LDD R26 , Y + 12
0001ec 85bd     +LDD R27 , Y + 12 + 1
0001ed 858e     +LDD R24 , Y + 12 + 2
0001ee 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
                +
0001ef e0e0     +LDI R30 , LOW ( 0x41200000 )
0001f0 e0f0     +LDI R31 , HIGH ( 0x41200000 )
0001f1 e260     +LDI R22 , BYTE3 ( 0x41200000 )
0001f2 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
0001f3 940e 0392 	CALL __MULF12
                +
0001f5 87ec     +STD Y + 12 , R30
0001f6 87fd     +STD Y + 12 + 1 , R31
0001f7 876e     +STD Y + 12 + 2 , R22
0001f8 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
                 ; 0005 0010     while(numberCopy>0){
                 _0xA0003:
0001f9 2400      	CLR  R0
0001fa 1602      	CP   R0,R18
0001fb 0603      	CPC  R0,R19
0001fc f5f0      	BRSH _0xA0005
                 ; 0005 0011         delay_ms(50);
0001fd e3a2      	LDI  R26,LOW(50)
0001fe e0b0      	LDI  R27,0
0001ff 940e 029d 	CALL _delay_ms
                 ; 0005 0012         number=numberCopy;
000201 0189      	MOVW R16,R18
                 ; 0005 0013         Deci=number%10;
000202 d084      	RCALL SUBOPT_0x6
000203 83ee      	STD  Y+6,R30
000204 83ff      	STD  Y+6+1,R31
                 ; 0005 0014         number= number /10;
000205 d087      	RCALL SUBOPT_0x7
                 ; 0005 0015         FirstDigit=number%10;
000206 01af      	MOVW R20,R30
                 ; 0005 0016         number= number /10;
000207 d085      	RCALL SUBOPT_0x7
                 ; 0005 0017         SecondDigit = number %10;
000208 87ea      	STD  Y+10,R30
000209 87fb      	STD  Y+10+1,R31
                 ; 0005 0018         number= number /10;
00020a 01d8      	MOVW R26,R16
00020b e0ea      	LDI  R30,LOW(10)
00020c e0f0      	LDI  R31,HIGH(10)
00020d 940e 03ed 	CALL __DIVW21U
00020f 018f      	MOVW R16,R30
                 ; 0005 0019         ThirdDigit= number;
                +
000210 8708     +STD Y + 8 , R16
000211 8719     +STD Y + 8 + 1 , R17
                 	__PUTWSR 16,17,8
                 ; 0005 001A         DDRD.2=1;
000212 9a8a      	SBI  0x11,2
                 ; 0005 001B         PORTC= sevenseg[FirstDigit]+ 0b10000000;   //point on
000213 e6a0      	LDI  R26,LOW(_sevenseg)
000214 e0b1      	LDI  R27,HIGH(_sevenseg)
000215 0fa4      	ADD  R26,R20
000216 1fb5      	ADC  R27,R21
000217 91ec      	LD   R30,X
000218 58e0      	SUBI R30,-LOW(128)
000219 d07a      	RCALL SUBOPT_0x8
                 ; 0005 001C         delay_ms(1);
                 ; 0005 001D         DDRD.2=0;
00021a 988a      	CBI  0x11,2
                 ; 0005 001E         DDRD.1=1;
00021b 9a89      	SBI  0x11,1
                 ; 0005 001F         PORTC= sevenseg[SecondDigit];
00021c 85ea      	LDD  R30,Y+10
00021d 85fb      	LDD  R31,Y+10+1
00021e d07a      	RCALL SUBOPT_0x9
                 ; 0005 0020         delay_ms(1);
                 ; 0005 0021         DDRD.1=0;
00021f 9889      	CBI  0x11,1
                 ; 0005 0022         DDRD.0=1;
000220 9a88      	SBI  0x11,0
                 ; 0005 0023         PORTC= sevenseg[ThirdDigit];
000221 85e8      	LDD  R30,Y+8
000222 85f9      	LDD  R31,Y+8+1
000223 d075      	RCALL SUBOPT_0x9
                 ; 0005 0024         delay_ms(1);
                 ; 0005 0025         DDRD.0=0;
000224 9888      	CBI  0x11,0
                 ; 0005 0026         DDRD.3=1;
000225 9a8b      	SBI  0x11,3
                 ; 0005 0027         PORTC= sevenseg[Deci];
000226 81ee      	LDD  R30,Y+6
000227 81ff      	LDD  R31,Y+6+1
000228 d070      	RCALL SUBOPT_0x9
                 ; 0005 0028         delay_ms(1);
                 ; 0005 0029         DDRD.3=0;
000229 988b      	CBI  0x11,3
                 ; 0005 002A         numberCopy = numberCopy - reducer ;
                +
00022a 85ec     +LDD R30 , Y + 12
00022b 85fd     +LDD R31 , Y + 12 + 1
00022c 856e     +LDD R22 , Y + 12 + 2
00022d 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00022e 01d9      	MOVW R26,R18
00022f 2788      	CLR  R24
000230 2799      	CLR  R25
000231 940e 040a 	CALL __CDF2
000233 940e 040d 	CALL __SWAPD12
000235 940e 0340 	CALL __SUBF12
000237 940e 02d4 	CALL __CFD1U
000239 019f      	MOVW R18,R30
                 ; 0005 002B         //delay_ms(200);
                 ; 0005 002C 
                 ; 0005 002D 
                 ; 0005 002E 
                 ; 0005 002F     }
00023a cfbe      	RJMP _0xA0003
                 _0xA0005:
                 ; 0005 0030 }
00023b 940e 0421 	CALL __LOADLOCR6
00023d 9660      	ADIW R28,16
00023e 9508      	RET
                 ; .FEND
                 ;#include <headers.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;void CallAll(void){
                 ; 0006 0002 void CallAll(void){
                 
                 	.CSEG
                 _CallAll:
                 ; .FSTART _CallAll
                 ; 0006 0003     LED_ON_OFF(5,myPORTB,500); //question1
00023f e0e5      	LDI  R30,LOW(5)
000240 e0f0      	LDI  R31,HIGH(5)
000241 93fa      	ST   -Y,R31
000242 93ea      	ST   -Y,R30
000243 e0e1      	LDI  R30,LOW(1)
000244 93ea      	ST   -Y,R30
000245 efa4      	LDI  R26,LOW(500)
000246 e0b1      	LDI  R27,HIGH(500)
000247 940e 0063 	CALL _LED_ON_OFF
                 ; 0006 0004     DancingLight(2,5000);    //question2
000249 e0e2      	LDI  R30,LOW(2)
00024a e0f0      	LDI  R31,HIGH(2)
00024b 93fa      	ST   -Y,R31
00024c 93ea      	ST   -Y,R30
00024d e8a8      	LDI  R26,LOW(5000)
00024e e1b3      	LDI  R27,HIGH(5000)
00024f 940e 00d8 	CALL _DancingLight
                 ; 0006 0005     DiplayPortx_onLEDs(0 , 1);  //question3
000251 e0e0      	LDI  R30,LOW(0)
000252 e0f0      	LDI  R31,HIGH(0)
000253 93fa      	ST   -Y,R31
000254 93ea      	ST   -Y,R30
000255 e0a1      	LDI  R26,LOW(1)
000256 e0b0      	LDI  R27,0
000257 940e 010e 	CALL _DiplayPortx_onLEDs
                 ; 0006 0006     NineToZero(0); //question4
000259 e0a0      	LDI  R26,LOW(0)
00025a e0b0      	LDI  R27,0
00025b 940e 0182 	CALL _NineToZero
                 ; 0006 0007     Reduce(0.3);  //question5
                +
00025d e9aa     +LDI R26 , LOW ( 0x3E99999A )
00025e e9b9     +LDI R27 , HIGH ( 0x3E99999A )
00025f e989     +LDI R24 , BYTE3 ( 0x3E99999A )
000260 e39e     +LDI R25 , BYTE4 ( 0x3E99999A )
                 	__GETD2N 0x3E99999A
000261 df6a      	RCALL _Reduce
                 ; 0006 0008 }
000262 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _sevenseg:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000263 81ed      	LDD  R30,Y+5
000264 81fe      	LDD  R31,Y+5+1
000265 170e      	CP   R16,R30
000266 071f      	CPC  R17,R31
000267 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x1:
000268 81aa      	LDD  R26,Y+2
000269 81bb      	LDD  R27,Y+2+1
00026a 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
00026c e0a2     +LDI R26 , 2
00026d 9fa4     +MUL R26 , R20
00026e 01f0     +MOVW R30 , R0
00026f 9fa5     +MUL R26 , R21
000270 0df0     +ADD R31 , R0
                 	__MULBNWRU 20,21,2
000271 01af      	MOVW R20,R30
000272 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
                +
000273 5f2f     +SUBI R18 , LOW ( - 1 )
000274 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000275 e0a1      	LDI  R26,LOW(1)
000276 e0b0      	LDI  R27,0
000277 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000279 efef      	LDI  R30,LOW(255)
00027a bbe4      	OUT  0x14,R30
00027b e0ef      	LDI  R30,LOW(15)
00027c bbe1      	OUT  0x11,R30
00027d 9a88      	SBI  0x11,0
00027e 9a89      	SBI  0x11,1
00027f 9a8a      	SBI  0x11,2
000280 9a8b      	SBI  0x11,3
000281 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 18 TIMES, CODE SIZE REDUCTION:48 WORDS
                 SUBOPT_0x5:
000282 bbe5      	OUT  0x15,R30
000283 efa4      	LDI  R26,LOW(500)
000284 e0b1      	LDI  R27,HIGH(500)
000285 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
000287 01d8      	MOVW R26,R16
000288 e0ea      	LDI  R30,LOW(10)
000289 e0f0      	LDI  R31,HIGH(10)
00028a 940e 0400 	CALL __MODW21U
00028c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
00028d 01d8      	MOVW R26,R16
00028e e0ea      	LDI  R30,LOW(10)
00028f e0f0      	LDI  R31,HIGH(10)
000290 940e 03ed 	CALL __DIVW21U
000292 018f      	MOVW R16,R30
000293 cff3      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x8:
000294 bbe5      	OUT  0x15,R30
000295 e0a1      	LDI  R26,LOW(1)
000296 e0b0      	LDI  R27,0
000297 940c 029d 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000299 5ae0      	SUBI R30,LOW(-_sevenseg)
00029a 4ffe      	SBCI R31,HIGH(-_sevenseg)
00029b 81e0      	LD   R30,Z
00029c cff7      	RJMP SUBOPT_0x8
                 
                 
                 	.CSEG
                 _delay_ms:
00029d 9610      	adiw r26,0
00029e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00029f ed80     +LDI R24 , LOW ( 0x7D0 )
0002a0 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002a1 9701     +SBIW R24 , 1
0002a2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002a3 95a8      	wdr
0002a4 9711      	sbiw r26,1
0002a5 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002a6 9508      	ret
                 
                 __ROUND_REPACK:
0002a7 2355      	TST  R21
0002a8 f442      	BRPL __REPACK
0002a9 3850      	CPI  R21,0x80
0002aa f411      	BRNE __ROUND_REPACK0
0002ab ffe0      	SBRS R30,0
0002ac c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0002ad 9631      	ADIW R30,1
0002ae 1f69      	ADC  R22,R25
0002af 1f79      	ADC  R23,R25
0002b0 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0002b1 e850      	LDI  R21,0x80
0002b2 2757      	EOR  R21,R23
0002b3 f411      	BRNE __REPACK0
0002b4 935f      	PUSH R21
0002b5 c0ca      	RJMP __ZERORES
                 __REPACK0:
0002b6 3f5f      	CPI  R21,0xFF
0002b7 f031      	BREQ __REPACK1
0002b8 0f66      	LSL  R22
0002b9 0c00      	LSL  R0
0002ba 9557      	ROR  R21
0002bb 9567      	ROR  R22
0002bc 2f75      	MOV  R23,R21
0002bd 9508      	RET
                 __REPACK1:
0002be 935f      	PUSH R21
0002bf 2000      	TST  R0
0002c0 f00a      	BRMI __REPACK2
0002c1 c0ca      	RJMP __MAXRES
                 __REPACK2:
0002c2 c0c3      	RJMP __MINRES
                 
                 __UNPACK:
0002c3 e850      	LDI  R21,0x80
0002c4 2e19      	MOV  R1,R25
0002c5 2215      	AND  R1,R21
0002c6 0f88      	LSL  R24
0002c7 1f99      	ROL  R25
0002c8 2795      	EOR  R25,R21
0002c9 0f55      	LSL  R21
0002ca 9587      	ROR  R24
                 
                 __UNPACK1:
0002cb e850      	LDI  R21,0x80
0002cc 2e07      	MOV  R0,R23
0002cd 2205      	AND  R0,R21
0002ce 0f66      	LSL  R22
0002cf 1f77      	ROL  R23
0002d0 2775      	EOR  R23,R21
0002d1 0f55      	LSL  R21
0002d2 9567      	ROR  R22
0002d3 9508      	RET
                 
                 __CFD1U:
0002d4 9468      	SET
0002d5 c001      	RJMP __CFD1U0
                 __CFD1:
0002d6 94e8      	CLT
                 __CFD1U0:
0002d7 935f      	PUSH R21
0002d8 dff2      	RCALL __UNPACK1
0002d9 3870      	CPI  R23,0x80
0002da f018      	BRLO __CFD10
0002db 3f7f      	CPI  R23,0xFF
0002dc f408      	BRCC __CFD10
0002dd c0a2      	RJMP __ZERORES
                 __CFD10:
0002de e156      	LDI  R21,22
0002df 1b57      	SUB  R21,R23
0002e0 f4aa      	BRPL __CFD11
0002e1 9551      	NEG  R21
0002e2 3058      	CPI  R21,8
0002e3 f40e      	BRTC __CFD19
0002e4 3059      	CPI  R21,9
                 __CFD19:
0002e5 f030      	BRLO __CFD17
0002e6 efef      	SER  R30
0002e7 efff      	SER  R31
0002e8 ef6f      	SER  R22
0002e9 e77f      	LDI  R23,0x7F
0002ea f977      	BLD  R23,7
0002eb c01a      	RJMP __CFD15
                 __CFD17:
0002ec 2777      	CLR  R23
0002ed 2355      	TST  R21
0002ee f0b9      	BREQ __CFD15
                 __CFD18:
0002ef 0fee      	LSL  R30
0002f0 1fff      	ROL  R31
0002f1 1f66      	ROL  R22
0002f2 1f77      	ROL  R23
0002f3 955a      	DEC  R21
0002f4 f7d1      	BRNE __CFD18
0002f5 c010      	RJMP __CFD15
                 __CFD11:
0002f6 2777      	CLR  R23
                 __CFD12:
0002f7 3058      	CPI  R21,8
0002f8 f028      	BRLO __CFD13
0002f9 2fef      	MOV  R30,R31
0002fa 2ff6      	MOV  R31,R22
0002fb 2f67      	MOV  R22,R23
0002fc 5058      	SUBI R21,8
0002fd cff9      	RJMP __CFD12
                 __CFD13:
0002fe 2355      	TST  R21
0002ff f031      	BREQ __CFD15
                 __CFD14:
000300 9576      	LSR  R23
000301 9567      	ROR  R22
000302 95f7      	ROR  R31
000303 95e7      	ROR  R30
000304 955a      	DEC  R21
000305 f7d1      	BRNE __CFD14
                 __CFD15:
000306 2000      	TST  R0
000307 f40a      	BRPL __CFD16
000308 d0d7      	RCALL __ANEGD1
                 __CFD16:
000309 915f      	POP  R21
00030a 9508      	RET
                 
                 __CDF1U:
00030b 9468      	SET
00030c c001      	RJMP __CDF1U0
                 __CDF1:
00030d 94e8      	CLT
                 __CDF1U0:
00030e 9730      	SBIW R30,0
00030f 4060      	SBCI R22,0
000310 4070      	SBCI R23,0
000311 f0b1      	BREQ __CDF10
000312 2400      	CLR  R0
000313 f026      	BRTS __CDF11
000314 2377      	TST  R23
000315 f412      	BRPL __CDF11
000316 9400      	COM  R0
000317 d0c8      	RCALL __ANEGD1
                 __CDF11:
000318 2e17      	MOV  R1,R23
000319 e17e      	LDI  R23,30
00031a 2011      	TST  R1
                 __CDF12:
00031b f032      	BRMI __CDF13
00031c 957a      	DEC  R23
00031d 0fee      	LSL  R30
00031e 1fff      	ROL  R31
00031f 1f66      	ROL  R22
000320 1c11      	ROL  R1
000321 cff9      	RJMP __CDF12
                 __CDF13:
000322 2fef      	MOV  R30,R31
000323 2ff6      	MOV  R31,R22
000324 2d61      	MOV  R22,R1
000325 935f      	PUSH R21
000326 df8a      	RCALL __REPACK
000327 915f      	POP  R21
                 __CDF10:
000328 9508      	RET
                 
                 __SWAPACC:
000329 934f      	PUSH R20
00032a 01af      	MOVW R20,R30
00032b 01fd      	MOVW R30,R26
00032c 01da      	MOVW R26,R20
00032d 01ab      	MOVW R20,R22
00032e 01bc      	MOVW R22,R24
00032f 01ca      	MOVW R24,R20
000330 2d40      	MOV  R20,R0
000331 2c01      	MOV  R0,R1
000332 2e14      	MOV  R1,R20
000333 914f      	POP  R20
000334 9508      	RET
                 
                 __UADD12:
000335 0fea      	ADD  R30,R26
000336 1ffb      	ADC  R31,R27
000337 1f68      	ADC  R22,R24
000338 9508      	RET
                 
                 __NEGMAN1:
000339 95e0      	COM  R30
00033a 95f0      	COM  R31
00033b 9560      	COM  R22
00033c 5fef      	SUBI R30,-1
00033d 4fff      	SBCI R31,-1
00033e 4f6f      	SBCI R22,-1
00033f 9508      	RET
                 
                 __SUBF12:
000340 935f      	PUSH R21
000341 df81      	RCALL __UNPACK
000342 3890      	CPI  R25,0x80
000343 f149      	BREQ __ADDF129
000344 e850      	LDI  R21,0x80
000345 2615      	EOR  R1,R21
                 
                 __ADDF120:
000346 3870      	CPI  R23,0x80
000347 f121      	BREQ __ADDF128
                 __ADDF121:
000348 2f57      	MOV  R21,R23
000349 1b59      	SUB  R21,R25
00034a f12b      	BRVS __ADDF1211
00034b f412      	BRPL __ADDF122
00034c dfdc      	RCALL __SWAPACC
00034d cffa      	RJMP __ADDF121
                 __ADDF122:
00034e 3158      	CPI  R21,24
00034f f018      	BRLO __ADDF123
000350 27aa      	CLR  R26
000351 27bb      	CLR  R27
000352 2788      	CLR  R24
                 __ADDF123:
000353 3058      	CPI  R21,8
000354 f028      	BRLO __ADDF124
000355 2fab      	MOV  R26,R27
000356 2fb8      	MOV  R27,R24
000357 2788      	CLR  R24
000358 5058      	SUBI R21,8
000359 cff9      	RJMP __ADDF123
                 __ADDF124:
00035a 2355      	TST  R21
00035b f029      	BREQ __ADDF126
                 __ADDF125:
00035c 9586      	LSR  R24
00035d 95b7      	ROR  R27
00035e 95a7      	ROR  R26
00035f 955a      	DEC  R21
000360 f7d9      	BRNE __ADDF125
                 __ADDF126:
000361 2d50      	MOV  R21,R0
000362 2551      	EOR  R21,R1
000363 f072      	BRMI __ADDF127
000364 dfd0      	RCALL __UADD12
000365 f438      	BRCC __ADDF129
000366 9567      	ROR  R22
000367 95f7      	ROR  R31
000368 95e7      	ROR  R30
000369 9573      	INC  R23
00036a f413      	BRVC __ADDF129
00036b c020      	RJMP __MAXRES
                 __ADDF128:
00036c dfbc      	RCALL __SWAPACC
                 __ADDF129:
00036d df43      	RCALL __REPACK
00036e 915f      	POP  R21
00036f 9508      	RET
                 __ADDF1211:
000370 f7d8      	BRCC __ADDF128
000371 cffb      	RJMP __ADDF129
                 __ADDF127:
000372 1bea      	SUB  R30,R26
000373 0bfb      	SBC  R31,R27
000374 0b68      	SBC  R22,R24
000375 f051      	BREQ __ZERORES
000376 f410      	BRCC __ADDF1210
000377 9400      	COM  R0
000378 dfc0      	RCALL __NEGMAN1
                 __ADDF1210:
000379 2366      	TST  R22
00037a f392      	BRMI __ADDF129
00037b 0fee      	LSL  R30
00037c 1fff      	ROL  R31
00037d 1f66      	ROL  R22
00037e 957a      	DEC  R23
00037f f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000380 27ee      	CLR  R30
000381 27ff      	CLR  R31
000382 2766      	CLR  R22
000383 2777      	CLR  R23
000384 915f      	POP  R21
000385 9508      	RET
                 
                 __MINRES:
000386 efef      	SER  R30
000387 efff      	SER  R31
000388 e76f      	LDI  R22,0x7F
000389 ef7f      	SER  R23
00038a 915f      	POP  R21
00038b 9508      	RET
                 
                 __MAXRES:
00038c efef      	SER  R30
00038d efff      	SER  R31
00038e e76f      	LDI  R22,0x7F
00038f e77f      	LDI  R23,0x7F
000390 915f      	POP  R21
000391 9508      	RET
                 
                 __MULF12:
000392 935f      	PUSH R21
000393 df2f      	RCALL __UNPACK
000394 3870      	CPI  R23,0x80
000395 f351      	BREQ __ZERORES
000396 3890      	CPI  R25,0x80
000397 f341      	BREQ __ZERORES
000398 2401      	EOR  R0,R1
000399 9408      	SEC
00039a 1f79      	ADC  R23,R25
00039b f423      	BRVC __MULF124
00039c f31c      	BRLT __ZERORES
                 __MULF125:
00039d 2000      	TST  R0
00039e f33a      	BRMI __MINRES
00039f cfec      	RJMP __MAXRES
                 __MULF124:
0003a0 920f      	PUSH R0
0003a1 931f      	PUSH R17
0003a2 932f      	PUSH R18
0003a3 933f      	PUSH R19
0003a4 934f      	PUSH R20
0003a5 2711      	CLR  R17
0003a6 2722      	CLR  R18
0003a7 2799      	CLR  R25
0003a8 9f68      	MUL  R22,R24
0003a9 01a0      	MOVW R20,R0
0003aa 9f8f      	MUL  R24,R31
0003ab 2d30      	MOV  R19,R0
0003ac 0d41      	ADD  R20,R1
0003ad 1f59      	ADC  R21,R25
0003ae 9f6b      	MUL  R22,R27
0003af 0d30      	ADD  R19,R0
0003b0 1d41      	ADC  R20,R1
0003b1 1f59      	ADC  R21,R25
0003b2 9f8e      	MUL  R24,R30
0003b3 d027      	RCALL __MULF126
0003b4 9fbf      	MUL  R27,R31
0003b5 d025      	RCALL __MULF126
0003b6 9f6a      	MUL  R22,R26
0003b7 d023      	RCALL __MULF126
0003b8 9fbe      	MUL  R27,R30
0003b9 d01d      	RCALL __MULF127
0003ba 9faf      	MUL  R26,R31
0003bb d01b      	RCALL __MULF127
0003bc 9fae      	MUL  R26,R30
0003bd 0d11      	ADD  R17,R1
0003be 1f29      	ADC  R18,R25
0003bf 1f39      	ADC  R19,R25
0003c0 1f49      	ADC  R20,R25
0003c1 1f59      	ADC  R21,R25
0003c2 2fe3      	MOV  R30,R19
0003c3 2ff4      	MOV  R31,R20
0003c4 2f65      	MOV  R22,R21
0003c5 2f52      	MOV  R21,R18
0003c6 914f      	POP  R20
0003c7 913f      	POP  R19
0003c8 912f      	POP  R18
0003c9 911f      	POP  R17
0003ca 900f      	POP  R0
0003cb 2366      	TST  R22
0003cc f02a      	BRMI __MULF122
0003cd 0f55      	LSL  R21
0003ce 1fee      	ROL  R30
0003cf 1fff      	ROL  R31
0003d0 1f66      	ROL  R22
0003d1 c002      	RJMP __MULF123
                 __MULF122:
0003d2 9573      	INC  R23
0003d3 f24b      	BRVS __MULF125
                 __MULF123:
0003d4 ded2      	RCALL __ROUND_REPACK
0003d5 915f      	POP  R21
0003d6 9508      	RET
                 
                 __MULF127:
0003d7 0d10      	ADD  R17,R0
0003d8 1d21      	ADC  R18,R1
0003d9 1f39      	ADC  R19,R25
0003da c002      	RJMP __MULF128
                 __MULF126:
0003db 0d20      	ADD  R18,R0
0003dc 1d31      	ADC  R19,R1
                 __MULF128:
0003dd 1f49      	ADC  R20,R25
0003de 1f59      	ADC  R21,R25
0003df 9508      	RET
                 
                 __ANEGD1:
0003e0 95f0      	COM  R31
0003e1 9560      	COM  R22
0003e2 9570      	COM  R23
0003e3 95e1      	NEG  R30
0003e4 4fff      	SBCI R31,-1
0003e5 4f6f      	SBCI R22,-1
0003e6 4f7f      	SBCI R23,-1
0003e7 9508      	RET
                 
                 __CWD2:
0003e8 2f8b      	MOV  R24,R27
0003e9 0f88      	ADD  R24,R24
0003ea 0b88      	SBC  R24,R24
0003eb 2f98      	MOV  R25,R24
0003ec 9508      	RET
                 
                 __DIVW21U:
0003ed 2400      	CLR  R0
0003ee 2411      	CLR  R1
0003ef e190      	LDI  R25,16
                 __DIVW21U1:
0003f0 0faa      	LSL  R26
0003f1 1fbb      	ROL  R27
0003f2 1c00      	ROL  R0
0003f3 1c11      	ROL  R1
0003f4 1a0e      	SUB  R0,R30
0003f5 0a1f      	SBC  R1,R31
0003f6 f418      	BRCC __DIVW21U2
0003f7 0e0e      	ADD  R0,R30
0003f8 1e1f      	ADC  R1,R31
0003f9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0003fa 60a1      	SBR  R26,1
                 __DIVW21U3:
0003fb 959a      	DEC  R25
0003fc f799      	BRNE __DIVW21U1
0003fd 01fd      	MOVW R30,R26
0003fe 01d0      	MOVW R26,R0
0003ff 9508      	RET
                 
                 __MODW21U:
000400 dfec      	RCALL __DIVW21U
000401 01fd      	MOVW R30,R26
000402 9508      	RET
                 
                 __PUTPARD2:
000403 939a      	ST   -Y,R25
000404 938a      	ST   -Y,R24
000405 93ba      	ST   -Y,R27
000406 93aa      	ST   -Y,R26
000407 9508      	RET
                 
                 __CDF2U:
000408 9468      	SET
000409 c001      	RJMP __CDF2U0
                 __CDF2:
00040a 94e8      	CLT
                 __CDF2U0:
00040b d001      	RCALL __SWAPD12
00040c df01      	RCALL __CDF1U0
                 
                 __SWAPD12:
00040d 2e18      	MOV  R1,R24
00040e 2f86      	MOV  R24,R22
00040f 2d61      	MOV  R22,R1
000410 2e19      	MOV  R1,R25
000411 2f97      	MOV  R25,R23
000412 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000413 2e1b      	MOV  R1,R27
000414 2fbf      	MOV  R27,R31
000415 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000416 2e1a      	MOV  R1,R26
000417 2fae      	MOV  R26,R30
000418 2de1      	MOV  R30,R1
000419 9508      	RET
                 
                 __SAVELOCR6:
00041a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00041b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00041c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00041d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00041e 931a      	ST   -Y,R17
00041f 930a      	ST   -Y,R16
000420 9508      	RET
                 
                 __LOADLOCR6:
000421 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000422 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000423 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000424 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000425 8119      	LDD  R17,Y+1
000426 8108      	LD   R16,Y
000427 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  36 r1 :  29 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  38 r17:  29 r18:  26 r19:  23 r20:  27 r21:  65 r22:  41 r23:  38 
r24:  34 r25:  31 r26:  71 r27:  36 r28:   7 r29:   1 r30: 203 r31:  70 
x  :   4 y  :  84 z  :   8 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  19 add   :  11 
adiw  :   7 and   :   2 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   5 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   6 brne  :  23 brpl  :   5 brsh  :  13 brtc  :   1 
brts  :   1 brvc  :   3 brvs  :   3 bset  :   0 bst   :   0 call  :  66 
cbi   :   4 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  23 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   8 
cp    :   3 cpc   :  19 cpi   :  29 cpse  :   0 dec   :   7 des   :   0 
eor   :   6 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  26 ld    :   4 ldd   :  37 ldi   : 167 
lds   :   0 lpm   :   7 lsl   :  11 lsr   :   2 mov   :  36 movw  :  26 
mul   :  13 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  45 pop   :  13 push  :  12 rcall :  28 ret   :  32 
reti  :   0 rjmp  :  48 rol   :  16 ror   :  12 sbc   :   4 sbci  :  16 
sbi   :   8 sbic  :   0 sbis  :   0 sbiw  :  11 sbr   :   1 sbrc  :   0 
sbrs  :   1 sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :  17 sts   :   0 sub   :   4 subi  :  13 swap  :   0 
tst   :  11 wdr   :   1 
Instructions used: 64 out of 116 (55.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000850   2110     18   2128   16384  13.0%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
