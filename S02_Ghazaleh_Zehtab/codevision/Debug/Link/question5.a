;#include <headers.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void Reduce(float reducer){
; 0005 0003 void Reduce(float reducer){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0005 0004     unsigned int number=0;
; 0005 0005     unsigned int numberCopy=0;
; 0005 0006     unsigned int FirstDigit=0;
; 0005 0007     unsigned int SecondDigit=0;
; 0005 0008     unsigned int ThirdDigit=0;
; 0005 0009     unsigned int Deci=0;        // after point
; 0005 000A     DDRA=0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;	reducer -> Y+12
;	number -> R16,R17
;	numberCopy -> R18,R19
;	FirstDigit -> R20,R21
;	SecondDigit -> Y+10
;	ThirdDigit -> Y+8
;	Deci -> Y+6
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0005 000B     DDRC=0xFF;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0005 000C     DDRD=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0005 000D     number= PINA;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0005 000E     numberCopy = number  *10;   //FOR making decimal easier
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0005 000F     reducer *=10;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0005 0010     while(numberCopy>0){
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0005 0011         delay_ms(50);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0005 0012         number=numberCopy;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0005 0013         Deci=number%10;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0005 0014         number= number /10;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0005 0015         FirstDigit=number%10;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0005 0016         number= number /10;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0005 0017         SecondDigit = number %10;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0005 0018         number= number /10;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0005 0019         ThirdDigit= number;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0005 001A         DDRD.2=1;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0005 001B         PORTC= sevenseg[FirstDigit]+ 0b10000000;   //point on
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0005 001C         delay_ms(1);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0005 001D         DDRD.2=0;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0005 001E         DDRD.1=1;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0005 001F         PORTC= sevenseg[SecondDigit];
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0005 0020         delay_ms(1);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0005 0021         DDRD.1=0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0005 0022         DDRD.0=1;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0005 0023         PORTC= sevenseg[ThirdDigit];
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0005 0024         delay_ms(1);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0005 0025         DDRD.0=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0005 0026         DDRD.3=1;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0005 0027         PORTC= sevenseg[Deci];
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0005 0028         delay_ms(1);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0005 0029         DDRD.3=0;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0005 002A         numberCopy = numberCopy - reducer ;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0005 002B         //delay_ms(200);
; 0005 002C 
; 0005 002D 
; 0005 002E 
; 0005 002F     }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0005 0030 }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
