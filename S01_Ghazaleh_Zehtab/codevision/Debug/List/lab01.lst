
AVRASM ver. 2.1.30  C:\_uni\term7\Lab_Micro\S01_Ghazaleh_Zehtab\codevision\Debug\List\lab01.asm Sun Oct 04 00:11:35 2020

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0038 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0x29:
00002f 0000
000030 0000
000031 0000
000032 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000033 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000034 000a      	.DW  0x0A
000035 0160      	.DW  _sevenseg
000036 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000037 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000038 94f8      	CLI
000039 27ee      	CLR  R30
00003a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003b e0f1      	LDI  R31,1
00003c bffb      	OUT  GICR,R31
00003d bfeb      	OUT  GICR,R30
00003e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003f e08d      	LDI  R24,(14-2)+1
000040 e0a2      	LDI  R26,2
000041 27bb      	CLR  R27
                 __CLEAR_REG:
000042 93ed      	ST   X+,R30
000043 958a      	DEC  R24
000044 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000045 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000046 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000047 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000048 93ed      	ST   X+,R30
000049 9701      	SBIW R24,1
00004a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004b e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004d 9185      	LPM  R24,Z+
00004e 9195      	LPM  R25,Z+
00004f 9700      	SBIW R24,0
000050 f061      	BREQ __GLOBAL_INI_END
000051 91a5      	LPM  R26,Z+
000052 91b5      	LPM  R27,Z+
000053 9005      	LPM  R0,Z+
000054 9015      	LPM  R1,Z+
000055 01bf      	MOVW R22,R30
000056 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000057 9005      	LPM  R0,Z+
000058 920d      	ST   X+,R0
000059 9701      	SBIW R24,1
00005a f7e1      	BRNE __GLOBAL_INI_LOOP
00005b 01fb      	MOVW R30,R22
00005c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005e bfed      	OUT  SPL,R30
00005f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000060 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000061 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000062 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000063 940c 0179 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * lab01.c
                 ; *
                 ; * Created: 10/1/2020 1:32:13 PM
                 ; * Author: Ghazaleh Zehtab
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;
                 ;unsigned char sevenseg[]=
                 ;    {
                 ;
                 ;        0b00111111,  //0
                 ;        0b00000110,  //1
                 ;        0b01011011,  //2
                 ;        0b01001111, //3
                 ;        0b01100110, //4
                 ;        0b01101101, //5
                 ;        0b01111101, //6
                 ;        0b0000111,  //7
                 ;        0b01111111, //8
                 ;        0b01101111 //9
                 ;
                 ;    } ;
                 
                 	.DSEG
                 ;
                 ;//question 1
                 ;void AllLedON_4Times(void){
                 ; 0000 001D void AllLedON_4Times(void){
                 
                 	.CSEG
                 _AllLedON_4Times:
                 ; .FSTART _AllLedON_4Times
                 ; 0000 001E 
                 ; 0000 001F     unsigned int i; //integer as counter
                 ; 0000 0020     DDRB=0xFF;       // define port B as output
000065 931a      	ST   -Y,R17
000066 930a      	ST   -Y,R16
                 ;	i -> R16,R17
000067 efef      	LDI  R30,LOW(255)
000068 bbe7      	OUT  0x17,R30
                 ; 0000 0021     for(i=0;i<4;i++)
                +
000069 e000     +LDI R16 , LOW ( 0 )
00006a e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x5:
                +
00006b 3004     +CPI R16 , LOW ( 4 )
00006c e0e0     +LDI R30 , HIGH ( 4 )
00006d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
00006e f448      	BRSH _0x6
                 ; 0000 0022     {
                 ; 0000 0023        PORTB=0xFF;      //turn on all portB
00006f efef      	LDI  R30,LOW(255)
000070 bbe8      	OUT  0x18,R30
                 ; 0000 0024        delay_ms(500);  //delay
000071 d10f      	RCALL SUBOPT_0x0
                 ; 0000 0025        PORTB=0x00;     //turn off the portB
000072 e0e0      	LDI  R30,LOW(0)
000073 bbe8      	OUT  0x18,R30
                 ; 0000 0026        delay_ms(500);
000074 d10c      	RCALL SUBOPT_0x0
                 ; 0000 0027     }
                +
000075 5f0f     +SUBI R16 , LOW ( - 1 )
000076 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000077 cff3      	RJMP _0x5
                 _0x6:
                 ; 0000 0028 }
000078 c036      	RJMP _0x2000001
                 ; .FEND
                 ;//question 2
                 ;void DancingLight(void){
                 ; 0000 002A void DancingLight(void){
                 _DancingLight:
                 ; .FSTART _DancingLight
                 ; 0000 002B 
                 ; 0000 002C     unsigned int i; //integer as counter
                 ; 0000 002D     unsigned int num;
                 ; 0000 002E     num=1;
000079 940e 0227 	CALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	num -> R18,R19
                +
00007b e021     +LDI R18 , LOW ( 1 )
00007c e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 002F     DDRB=0xFF;       // define port B as output
00007d efef      	LDI  R30,LOW(255)
00007e bbe7      	OUT  0x17,R30
                 ; 0000 0030     for(i=0;i<20;i++)
                +
00007f e000     +LDI R16 , LOW ( 0 )
000080 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8:
                +
000081 3104     +CPI R16 , LOW ( 20 )
000082 e0e0     +LDI R30 , HIGH ( 20 )
000083 071e     +CPC R17 , R30
                 	__CPWRN 16,17,20
000084 f4a0      	BRSH _0x9
                 ; 0000 0031     {
                 ; 0000 0032        PORTB=num;      //turn on all portB
000085 bb28      	OUT  0x18,R18
                 ; 0000 0033        delay_ms(150);
000086 e9a6      	LDI  R26,LOW(150)
000087 e0b0      	LDI  R27,0
000088 940e 01f7 	CALL _delay_ms
                 ; 0000 0034        num = num * 2;    // turn on next LED
                +
00008a e0a2     +LDI R26 , 2
00008b 9fa2     +MUL R26 , R18
00008c 01f0     +MOVW R30 , R0
00008d 9fa3     +MUL R26 , R19
00008e 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,2
00008f 019f      	MOVW R18,R30
                 ; 0000 0035        if (num > 128){    //if last on in ON back to the beginig
                +
000090 3821     +CPI R18 , LOW ( 129 )
000091 e0e0     +LDI R30 , HIGH ( 129 )
000092 073e     +CPC R19 , R30
                 	__CPWRN 18,19,129
000093 f010      	BRLO _0xA
                 ; 0000 0036         num= 1;
                +
000094 e021     +LDI R18 , LOW ( 1 )
000095 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0037        }
                 ; 0000 0038     }
                 _0xA:
                +
000096 5f0f     +SUBI R16 , LOW ( - 1 )
000097 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000098 cfe8      	RJMP _0x8
                 _0x9:
                 ; 0000 0039 }
000099 940e 022e 	CALL __LOADLOCR4
00009b 9624      	ADIW R28,4
00009c 9508      	RET
                 ; .FEND
                 ;//question 3
                 ;void DiplayPortA_onLEDs(void){
                 ; 0000 003B void DiplayPortA_onLEDs(void){
                 _DiplayPortA_onLEDs:
                 ; .FSTART _DiplayPortA_onLEDs
                 ; 0000 003C     unsigned int i=0;
                 ; 0000 003D     DDRA=0x00;
00009d 931a      	ST   -Y,R17
00009e 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
00009f e000     +LDI R16 , LOW ( 0 )
0000a0 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
0000a1 e0e0      	LDI  R30,LOW(0)
0000a2 bbea      	OUT  0x1A,R30
                 ; 0000 003E     DDRB=0xFF;
0000a3 efef      	LDI  R30,LOW(255)
0000a4 bbe7      	OUT  0x17,R30
                 ; 0000 003F     while(i<3000){
                 _0xB:
                +
0000a5 3b08     +CPI R16 , LOW ( 3000 )
0000a6 e0eb     +LDI R30 , HIGH ( 3000 )
0000a7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,3000
0000a8 f430      	BRSH _0xD
                 ; 0000 0040         PORTB=PINA;
0000a9 b3e9      	IN   R30,0x19
0000aa bbe8      	OUT  0x18,R30
                 ; 0000 0041         i++;
                +
0000ab 5f0f     +SUBI R16 , LOW ( - 1 )
0000ac 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 0042         delay_ms(1);
0000ad d0d7      	RCALL SUBOPT_0x1
                 ; 0000 0043     }
0000ae cff6      	RJMP _0xB
                 _0xD:
                 ; 0000 0044 }
                 _0x2000001:
0000af 9109      	LD   R16,Y+
0000b0 9119      	LD   R17,Y+
0000b1 9508      	RET
                 ; .FEND
                 ;//question 4
                 ;void NineToZero(void){
                 ; 0000 0046 void NineToZero(void){
                 _NineToZero:
                 ; .FSTART _NineToZero
                 ; 0000 0047     DDRC=0xFF;
0000b2 efef      	LDI  R30,LOW(255)
0000b3 bbe4      	OUT  0x14,R30
                 ; 0000 0048     DDRD=0x0F;
0000b4 e0ef      	LDI  R30,LOW(15)
0000b5 bbe1      	OUT  0x11,R30
                 ; 0000 0049     DDRD.0=1;
0000b6 9a88      	SBI  0x11,0
                 ; 0000 004A     DDRD.1=1;
0000b7 9a89      	SBI  0x11,1
                 ; 0000 004B     DDRD.2=1;
0000b8 9a8a      	SBI  0x11,2
                 ; 0000 004C     DDRD.3=1;
0000b9 9a8b      	SBI  0x11,3
                 ; 0000 004D     PORTC=0b01101111; //9
0000ba e6ef      	LDI  R30,LOW(111)
0000bb bbe5      	OUT  0x15,R30
                 ; 0000 004E     delay_ms(500);
0000bc d0c4      	RCALL SUBOPT_0x0
                 ; 0000 004F     PORTC=0b01111111;    //8
0000bd e7ef      	LDI  R30,LOW(127)
0000be bbe5      	OUT  0x15,R30
                 ; 0000 0050     delay_ms(500);
0000bf d0c1      	RCALL SUBOPT_0x0
                 ; 0000 0051     PORTC=0b0000111;   //7
0000c0 e0e7      	LDI  R30,LOW(7)
0000c1 bbe5      	OUT  0x15,R30
                 ; 0000 0052     delay_ms(500);
0000c2 d0be      	RCALL SUBOPT_0x0
                 ; 0000 0053     PORTC=0b01111101;   //6
0000c3 e7ed      	LDI  R30,LOW(125)
0000c4 bbe5      	OUT  0x15,R30
                 ; 0000 0054     delay_ms(500);
0000c5 d0bb      	RCALL SUBOPT_0x0
                 ; 0000 0055     PORTC=0b01101101;    //5
0000c6 e6ed      	LDI  R30,LOW(109)
0000c7 bbe5      	OUT  0x15,R30
                 ; 0000 0056     delay_ms(500);
0000c8 d0b8      	RCALL SUBOPT_0x0
                 ; 0000 0057     PORTC=0b01100110;   //4
0000c9 e6e6      	LDI  R30,LOW(102)
0000ca bbe5      	OUT  0x15,R30
                 ; 0000 0058     delay_ms(500);
0000cb d0b5      	RCALL SUBOPT_0x0
                 ; 0000 0059     PORTC=0b01001111;   //3
0000cc e4ef      	LDI  R30,LOW(79)
0000cd bbe5      	OUT  0x15,R30
                 ; 0000 005A     delay_ms(500);
0000ce d0b2      	RCALL SUBOPT_0x0
                 ; 0000 005B     PORTC=0b01011011;    //2
0000cf e5eb      	LDI  R30,LOW(91)
0000d0 bbe5      	OUT  0x15,R30
                 ; 0000 005C     delay_ms(500);
0000d1 d0af      	RCALL SUBOPT_0x0
                 ; 0000 005D     PORTC=0b00000110;    //1
0000d2 e0e6      	LDI  R30,LOW(6)
0000d3 bbe5      	OUT  0x15,R30
                 ; 0000 005E     delay_ms(500);
0000d4 d0ac      	RCALL SUBOPT_0x0
                 ; 0000 005F     PORTC=0b00111111;    //0
0000d5 e3ef      	LDI  R30,LOW(63)
0000d6 bbe5      	OUT  0x15,R30
                 ; 0000 0060     delay_ms(500);
0000d7 d0a9      	RCALL SUBOPT_0x0
                 ; 0000 0061 
                 ; 0000 0062 
                 ; 0000 0063 }
0000d8 9508      	RET
                 ; .FEND
                 ;// question 5
                 ;
                 ;void Reduce(void){
                 ; 0000 0066 void Reduce(void){
                 _Reduce:
                 ; .FSTART _Reduce
                 ; 0000 0067 
                 ; 0000 0068     unsigned int number=0;
                 ; 0000 0069     unsigned int numberCopy=0;
                 ; 0000 006A     unsigned int FirstDigit=0;
                 ; 0000 006B     unsigned int SecondDigit=0;
                 ; 0000 006C     unsigned int ThirdDigit=0;
                 ; 0000 006D     unsigned int Deci=0;        // after point
                 ; 0000 006E     DDRA=0x00;
0000d9 9726      	SBIW R28,6
0000da e0e0      	LDI  R30,LOW(0)
0000db 83e8      	ST   Y,R30
0000dc 83e9      	STD  Y+1,R30
0000dd 83ea      	STD  Y+2,R30
0000de 83eb      	STD  Y+3,R30
0000df 83ec      	STD  Y+4,R30
0000e0 83ed      	STD  Y+5,R30
0000e1 d0a7      	RCALL SUBOPT_0x2
                 ;	number -> R16,R17
                 ;	numberCopy -> R18,R19
                 ;	FirstDigit -> R20,R21
                 ;	SecondDigit -> Y+10
                 ;	ThirdDigit -> Y+8
                 ;	Deci -> Y+6
                 ; 0000 006F     DDRC=0xFF;
                 ; 0000 0070     DDRD=0x00;
                 ; 0000 0071     number= PINA;
                 ; 0000 0072     numberCopy = number  *10;   //FOR making decimal easier
                 ; 0000 0073     while(numberCopy>0){
                 _0x16:
0000e2 2400      	CLR  R0
0000e3 1602      	CP   R0,R18
0000e4 0603      	CPC  R0,R19
0000e5 f500      	BRSH _0x18
                 ; 0000 0074         delay_ms(50);
0000e6 d0b9      	RCALL SUBOPT_0x3
                 ; 0000 0075         number=numberCopy;
                 ; 0000 0076         Deci=number%10;
0000e7 83ee      	STD  Y+6,R30
0000e8 83ff      	STD  Y+6+1,R31
                 ; 0000 0077         number= number /10;
0000e9 d0c1      	RCALL SUBOPT_0x4
                 ; 0000 0078         FirstDigit=number%10;
0000ea 01af      	MOVW R20,R30
                 ; 0000 0079         number= number /10;
0000eb d0bf      	RCALL SUBOPT_0x4
                 ; 0000 007A         SecondDigit = number %10;
0000ec 87ea      	STD  Y+10,R30
0000ed 87fb      	STD  Y+10+1,R31
                 ; 0000 007B         number= number /10;
0000ee d0c8      	RCALL SUBOPT_0x5
                 ; 0000 007C         ThirdDigit= number;
                +
0000ef 8708     +STD Y + 8 , R16
0000f0 8719     +STD Y + 8 + 1 , R17
                 	__PUTWSR 16,17,8
                 ; 0000 007D         DDRD.2=1;
0000f1 d0cc      	RCALL SUBOPT_0x6
                 ; 0000 007E         PORTC= sevenseg[FirstDigit]+ 0b10000000;   //point on
0000f2 58e0      	SUBI R30,-LOW(128)
0000f3 bbe5      	OUT  0x15,R30
                 ; 0000 007F         delay_ms(1);
0000f4 d090      	RCALL SUBOPT_0x1
                 ; 0000 0080         DDRD.2=0;
0000f5 988a      	CBI  0x11,2
                 ; 0000 0081         DDRD.1=1;
0000f6 9a89      	SBI  0x11,1
                 ; 0000 0082         PORTC= sevenseg[SecondDigit];
0000f7 d0cd      	RCALL SUBOPT_0x7
                 ; 0000 0083         delay_ms(1);
                 ; 0000 0084         DDRD.1=0;
0000f8 9889      	CBI  0x11,1
                 ; 0000 0085         DDRD.0=1;
0000f9 9a88      	SBI  0x11,0
                 ; 0000 0086         PORTC= sevenseg[ThirdDigit];
0000fa 85e8      	LDD  R30,Y+8
0000fb 85f9      	LDD  R31,Y+8+1
0000fc d0cf      	RCALL SUBOPT_0x8
                 ; 0000 0087         delay_ms(1);
                 ; 0000 0088         DDRD.0=0;
0000fd 9888      	CBI  0x11,0
                 ; 0000 0089         DDRD.3=1;
0000fe 9a8b      	SBI  0x11,3
                 ; 0000 008A         PORTC= sevenseg[Deci];
0000ff 81ee      	LDD  R30,Y+6
000100 81ff      	LDD  R31,Y+6+1
000101 d0ca      	RCALL SUBOPT_0x8
                 ; 0000 008B         delay_ms(1);
                 ; 0000 008C         DDRD.3=0;
000102 988b      	CBI  0x11,3
                 ; 0000 008D         numberCopy = numberCopy - 2 ;
                +
000103 5022     +SUBI R18 , LOW ( 2 )
000104 4030     +SBCI R19 , HIGH ( 2 )
                 	__SUBWRN 18,19,2
                 ; 0000 008E 
                 ; 0000 008F 
                 ; 0000 0090     }
000105 cfdc      	RJMP _0x16
                 _0x18:
                 ; 0000 0091 
                 ; 0000 0092 
                 ; 0000 0093 }
000106 940e 022c 	CALL __LOADLOCR6
000108 962c      	ADIW R28,12
000109 9508      	RET
                 ; .FEND
                 ;
                 ;// question 6
                 ;void reset7seg(void){
                 ; 0000 0096 void reset7seg(void){
                 _reset7seg:
                 ; .FSTART _reset7seg
                 ; 0000 0097 
                 ; 0000 0098     unsigned int number=0;
                 ; 0000 0099     unsigned int numberCopy=0;
                 ; 0000 009A     unsigned int FirstDigit=0;
                 ; 0000 009B     unsigned int SecondDigit=0;
                 ; 0000 009C     unsigned int ThirdDigit=0;
                 ; 0000 009D     unsigned int Deci=0;        // after point
                 ; 0000 009E     unsigned int fib=0;
                 ; 0000 009F     unsigned int foo=0;
                 ; 0000 00A0     DDRA=0x00;
00010a 972a      	SBIW R28,10
00010b e08a      	LDI  R24,10
00010c e0a0      	LDI  R26,LOW(0)
00010d e0b0      	LDI  R27,HIGH(0)
00010e e5ee      	LDI  R30,LOW(_0x29*2)
00010f e0f0      	LDI  R31,HIGH(_0x29*2)
000110 940e 0233 	CALL __INITLOCB
000112 d076      	RCALL SUBOPT_0x2
                 ;	number -> R16,R17
                 ;	numberCopy -> R18,R19
                 ;	FirstDigit -> R20,R21
                 ;	SecondDigit -> Y+14
                 ;	ThirdDigit -> Y+12
                 ;	Deci -> Y+10
                 ;	fib -> Y+8
                 ;	foo -> Y+6
                 ; 0000 00A1     DDRC=0xFF;
                 ; 0000 00A2     DDRD=0x00;
                 ; 0000 00A3     number= PINA;
                 ; 0000 00A4     numberCopy = number  *10;   //FOR making decimal easier
                 ; 0000 00A5     while(numberCopy>0){
                 _0x2A:
000113 2400      	CLR  R0
000114 1602      	CP   R0,R18
000115 0603      	CPC  R0,R19
000116 f008      	BRLO PC+2
000117 c05d      	RJMP _0x2C
                 ; 0000 00A6 
                 ; 0000 00A7         delay_ms(50);
000118 d087      	RCALL SUBOPT_0x3
                 ; 0000 00A8         number=numberCopy;
                 ; 0000 00A9         Deci=number%10;
000119 87ea      	STD  Y+10,R30
00011a 87fb      	STD  Y+10+1,R31
                 ; 0000 00AA         number= number /10;
00011b d08f      	RCALL SUBOPT_0x4
                 ; 0000 00AB         FirstDigit=number%10;
00011c 01af      	MOVW R20,R30
                 ; 0000 00AC         number= number /10;
00011d d08d      	RCALL SUBOPT_0x4
                 ; 0000 00AD         SecondDigit = number %10;
00011e 87ee      	STD  Y+14,R30
00011f 87ff      	STD  Y+14+1,R31
                 ; 0000 00AE         number= number /10;
000120 d096      	RCALL SUBOPT_0x5
                 ; 0000 00AF         ThirdDigit= number;
                +
000121 870c     +STD Y + 12 , R16
000122 871d     +STD Y + 12 + 1 , R17
                 	__PUTWSR 16,17,12
                 ; 0000 00B0         DDRD.2=1;
000123 d09a      	RCALL SUBOPT_0x6
                 ; 0000 00B1         PORTC= sevenseg[FirstDigit];   //point off
000124 bbe5      	OUT  0x15,R30
                 ; 0000 00B2         delay_ms(1);
000125 d05f      	RCALL SUBOPT_0x1
                 ; 0000 00B3         DDRD.2=0;
000126 988a      	CBI  0x11,2
                 ; 0000 00B4         DDRD.1=1;
000127 9a89      	SBI  0x11,1
                 ; 0000 00B5         PORTC= sevenseg[SecondDigit];
000128 85ee      	LDD  R30,Y+14
000129 85ff      	LDD  R31,Y+14+1
00012a d0a1      	RCALL SUBOPT_0x8
                 ; 0000 00B6         delay_ms(1);
                 ; 0000 00B7         DDRD.1=0;
00012b 9889      	CBI  0x11,1
                 ; 0000 00B8         DDRD.0=1;
00012c 9a88      	SBI  0x11,0
                 ; 0000 00B9         PORTC= sevenseg[ThirdDigit];
00012d 85ec      	LDD  R30,Y+12
00012e 85fd      	LDD  R31,Y+12+1
00012f d09c      	RCALL SUBOPT_0x8
                 ; 0000 00BA         delay_ms(1);
                 ; 0000 00BB         DDRD.0=0;
000130 9888      	CBI  0x11,0
                 ; 0000 00BC         DDRD.3=1;
000131 9a8b      	SBI  0x11,3
                 ; 0000 00BD         PORTC= sevenseg[Deci];
000132 d092      	RCALL SUBOPT_0x7
                 ; 0000 00BE         delay_ms(1);
                 ; 0000 00BF         DDRD.3=0;
000133 988b      	CBI  0x11,3
                 ; 0000 00C0         numberCopy = numberCopy - 2 ;
                +
000134 5022     +SUBI R18 , LOW ( 2 )
000135 4030     +SBCI R19 , HIGH ( 2 )
                 	__SUBWRN 18,19,2
                 ; 0000 00C1 
                 ; 0000 00C2          if (PIND.7==0){               //reduce that number from main number in all 4 if
000136 9987      	SBIC 0x10,7
000137 c010      	RJMP _0x3D
                 ; 0000 00C3              foo= numberCopy / 10;           //fib and foo are temp
000138 d098      	RCALL SUBOPT_0x9
                 ; 0000 00C4              foo = foo/10;
                 ; 0000 00C5              foo = foo/10;
000139 d0ab      	RCALL SUBOPT_0xA
                 ; 0000 00C6              fib= foo % 10;
                 ; 0000 00C7              fib = fib *1000;
00013a 85e8      	LDD  R30,Y+8
00013b 85f9      	LDD  R31,Y+8+1
00013c eea8      	LDI  R26,LOW(1000)
00013d e0b3      	LDI  R27,HIGH(1000)
00013e 940e 0201 	CALL __MULW12U
000140 d0b1      	RCALL SUBOPT_0xB
                 ; 0000 00C8              numberCopy= numberCopy - fib;
                +
000141 1b2a     +SUB R18 , R26
000142 0b3b     +SBC R19 , R27
                 	__SUBWRR 18,19,26,27
                 ; 0000 00C9              SecondDigit= 0 ;
000143 e0e0      	LDI  R30,LOW(0)
000144 87ee      	STD  Y+14,R30
000145 87ef      	STD  Y+14+1,R30
                 ; 0000 00CA              ThirdDigit= 0;
000146 87ec      	STD  Y+12,R30
000147 87ed      	STD  Y+12+1,R30
                 ; 0000 00CB 
                 ; 0000 00CC             //delay_ms(1000);
                 ; 0000 00CD         }
                 ; 0000 00CE         if (PIND.6==0){
                 _0x3D:
000148 9986      	SBIC 0x10,6
000149 c00d      	RJMP _0x3E
                 ; 0000 00CF              foo= numberCopy / 10;
00014a d086      	RCALL SUBOPT_0x9
                 ; 0000 00D0              foo = foo/10;
                 ; 0000 00D1              fib= foo % 10;
00014b 940e 0222 	CALL __MODW21U
00014d d0a4      	RCALL SUBOPT_0xB
                 ; 0000 00D2              fib = fib *100;
00014e e6e4      	LDI  R30,LOW(100)
00014f 940e 0209 	CALL __MULB1W2U
000151 d0a0      	RCALL SUBOPT_0xB
                 ; 0000 00D3              numberCopy= numberCopy - fib;
                +
000152 1b2a     +SUB R18 , R26
000153 0b3b     +SBC R19 , R27
                 	__SUBWRR 18,19,26,27
                 ; 0000 00D4              SecondDigit= 0 ;
000154 e0e0      	LDI  R30,LOW(0)
000155 87ee      	STD  Y+14,R30
000156 87ef      	STD  Y+14+1,R30
                 ; 0000 00D5         }
                 ; 0000 00D6         if (PIND.5==0){
                 _0x3E:
000157 9985      	SBIC 0x10,5
000158 c00e      	RJMP _0x3F
                 ; 0000 00D7              foo= numberCopy / 10;
000159 01d9      	MOVW R26,R18
00015a e0ea      	LDI  R30,LOW(10)
00015b e0f0      	LDI  R31,HIGH(10)
00015c d088      	RCALL SUBOPT_0xA
                 ; 0000 00D8              fib= foo % 10;
                 ; 0000 00D9              fib = fib *10;
00015d 85a8      	LDD  R26,Y+8
00015e 85b9      	LDD  R27,Y+8+1
00015f e0ea      	LDI  R30,LOW(10)
000160 940e 0209 	CALL __MULB1W2U
000162 d08f      	RCALL SUBOPT_0xB
                 ; 0000 00DA              numberCopy= numberCopy - fib;
                +
000163 1b2a     +SUB R18 , R26
000164 0b3b     +SBC R19 , R27
                 	__SUBWRR 18,19,26,27
                 ; 0000 00DB              FirstDigit= 0;
                +
000165 e040     +LDI R20 , LOW ( 0 )
000166 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 ; 0000 00DC         }
                 ; 0000 00DD         if (PIND.4==0){
                 _0x3F:
000167 9984      	SBIC 0x10,4
000168 c00b      	RJMP _0x40
                 ; 0000 00DE              //delay_ms(1000);
                 ; 0000 00DF              fib= numberCopy % 10;
000169 01d9      	MOVW R26,R18
00016a e0ea      	LDI  R30,LOW(10)
00016b e0f0      	LDI  R31,HIGH(10)
00016c 940e 0222 	CALL __MODW21U
00016e d083      	RCALL SUBOPT_0xB
                 ; 0000 00E0              numberCopy= numberCopy - fib;
                +
00016f 1b2a     +SUB R18 , R26
000170 0b3b     +SBC R19 , R27
                 	__SUBWRR 18,19,26,27
                 ; 0000 00E1              Deci= 0;
000171 e0e0      	LDI  R30,LOW(0)
000172 87ea      	STD  Y+10,R30
000173 87eb      	STD  Y+10+1,R30
                 ; 0000 00E2 
                 ; 0000 00E3         }
                 ; 0000 00E4 
                 ; 0000 00E5     }
                 _0x40:
000174 cf9e      	RJMP _0x2A
                 _0x2C:
                 ; 0000 00E6 
                 ; 0000 00E7 
                 ; 0000 00E8 }
000175 940e 022c 	CALL __LOADLOCR6
000177 9660      	ADIW R28,16
000178 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00EB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00EC     // Please write your application code here
                 ; 0000 00ED     AllLedON_4Times();   // call function of question 1
000179 deeb      	RCALL _AllLedON_4Times
                 ; 0000 00EE     DancingLight(); //call function for question 2
00017a defe      	RCALL _DancingLight
                 ; 0000 00EF     NineToZero();      //call function for question 4
00017b df36      	RCALL _NineToZero
                 ; 0000 00F0     while(1){
                 _0x41:
                 ; 0000 00F1         DiplayPortA_onLEDs(); //  call function for question 3
00017c df20      	RCALL _DiplayPortA_onLEDs
                 ; 0000 00F2         Reduce();   //call function for question 5
00017d df5b      	RCALL _Reduce
                 ; 0000 00F3         reset7seg(); //call function for question 6
00017e df8b      	RCALL _reset7seg
                 ; 0000 00F4     }
00017f cffc      	RJMP _0x41
                 ; 0000 00F5 
                 ; 0000 00F6 
                 ; 0000 00F7 
                 ; 0000 00F8 }
                 _0x44:
000180 cfff      	RJMP _0x44
                 ; .FEND
                 
                 	.DSEG
                 _sevenseg:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x0:
000181 efa4      	LDI  R26,LOW(500)
000182 e0b1      	LDI  R27,HIGH(500)
000183 940c 01f7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000185 e0a1      	LDI  R26,LOW(1)
000186 e0b0      	LDI  R27,0
000187 940c 01f7 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x2:
000189 940e 0225 	CALL __SAVELOCR6
                +
00018b e000     +LDI R16 , LOW ( 0 )
00018c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00018d e020     +LDI R18 , LOW ( 0 )
00018e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00018f e040     +LDI R20 , LOW ( 0 )
000190 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000191 e0e0      	LDI  R30,LOW(0)
000192 bbea      	OUT  0x1A,R30
000193 efef      	LDI  R30,LOW(255)
000194 bbe4      	OUT  0x14,R30
000195 e0e0      	LDI  R30,LOW(0)
000196 bbe1      	OUT  0x11,R30
000197 b309      	IN   R16,25
000198 2711      	CLR  R17
                +
000199 e0aa     +LDI R26 , 10
00019a 9fa0     +MUL R26 , R16
00019b 01f0     +MOVW R30 , R0
00019c 9fa1     +MUL R26 , R17
00019d 0df0     +ADD R31 , R0
                 	__MULBNWRU 16,17,10
00019e 019f      	MOVW R18,R30
00019f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0001a0 e3a2      	LDI  R26,LOW(50)
0001a1 e0b0      	LDI  R27,0
0001a2 940e 01f7 	CALL _delay_ms
0001a4 0189      	MOVW R16,R18
0001a5 01d8      	MOVW R26,R16
0001a6 e0ea      	LDI  R30,LOW(10)
0001a7 e0f0      	LDI  R31,HIGH(10)
0001a8 940e 0222 	CALL __MODW21U
0001aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x4:
0001ab 01d8      	MOVW R26,R16
0001ac e0ea      	LDI  R30,LOW(10)
0001ad e0f0      	LDI  R31,HIGH(10)
0001ae 940e 020f 	CALL __DIVW21U
0001b0 018f      	MOVW R16,R30
0001b1 01d8      	MOVW R26,R16
0001b2 e0ea      	LDI  R30,LOW(10)
0001b3 e0f0      	LDI  R31,HIGH(10)
0001b4 940e 0222 	CALL __MODW21U
0001b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
0001b7 01d8      	MOVW R26,R16
0001b8 e0ea      	LDI  R30,LOW(10)
0001b9 e0f0      	LDI  R31,HIGH(10)
0001ba 940e 020f 	CALL __DIVW21U
0001bc 018f      	MOVW R16,R30
0001bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0001be 9a8a      	SBI  0x11,2
0001bf e6a0      	LDI  R26,LOW(_sevenseg)
0001c0 e0b1      	LDI  R27,HIGH(_sevenseg)
0001c1 0fa4      	ADD  R26,R20
0001c2 1fb5      	ADC  R27,R21
0001c3 91ec      	LD   R30,X
0001c4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0001c5 85ea      	LDD  R30,Y+10
0001c6 85fb      	LDD  R31,Y+10+1
0001c7 5ae0      	SUBI R30,LOW(-_sevenseg)
0001c8 4ffe      	SBCI R31,HIGH(-_sevenseg)
0001c9 81e0      	LD   R30,Z
0001ca bbe5      	OUT  0x15,R30
0001cb cfb9      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
0001cc 5ae0      	SUBI R30,LOW(-_sevenseg)
0001cd 4ffe      	SBCI R31,HIGH(-_sevenseg)
0001ce 81e0      	LD   R30,Z
0001cf bbe5      	OUT  0x15,R30
0001d0 cfb4      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9:
0001d1 01d9      	MOVW R26,R18
0001d2 e0ea      	LDI  R30,LOW(10)
0001d3 e0f0      	LDI  R31,HIGH(10)
0001d4 940e 020f 	CALL __DIVW21U
0001d6 83ee      	STD  Y+6,R30
0001d7 83ff      	STD  Y+6+1,R31
0001d8 81ae      	LDD  R26,Y+6
0001d9 81bf      	LDD  R27,Y+6+1
0001da e0ea      	LDI  R30,LOW(10)
0001db e0f0      	LDI  R31,HIGH(10)
0001dc 940e 020f 	CALL __DIVW21U
0001de 83ee      	STD  Y+6,R30
0001df 83ff      	STD  Y+6+1,R31
0001e0 81ae      	LDD  R26,Y+6
0001e1 81bf      	LDD  R27,Y+6+1
0001e2 e0ea      	LDI  R30,LOW(10)
0001e3 e0f0      	LDI  R31,HIGH(10)
0001e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xA:
0001e5 940e 020f 	CALL __DIVW21U
0001e7 83ee      	STD  Y+6,R30
0001e8 83ff      	STD  Y+6+1,R31
0001e9 81ae      	LDD  R26,Y+6
0001ea 81bf      	LDD  R27,Y+6+1
0001eb e0ea      	LDI  R30,LOW(10)
0001ec e0f0      	LDI  R31,HIGH(10)
0001ed 940e 0222 	CALL __MODW21U
0001ef 87e8      	STD  Y+8,R30
0001f0 87f9      	STD  Y+8+1,R31
0001f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
0001f2 87e8      	STD  Y+8,R30
0001f3 87f9      	STD  Y+8+1,R31
0001f4 85a8      	LDD  R26,Y+8
0001f5 85b9      	LDD  R27,Y+8+1
0001f6 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0001f7 9610      	adiw r26,0
0001f8 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001f9 ed80     +LDI R24 , LOW ( 0x7D0 )
0001fa e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001fb 9701     +SBIW R24 , 1
0001fc f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001fd 95a8      	wdr
0001fe 9711      	sbiw r26,1
0001ff f7c9      	brne __delay_ms0
                 __delay_ms1:
000200 9508      	ret
                 
                 __MULW12U:
000201 9ffa      	MUL  R31,R26
000202 2df0      	MOV  R31,R0
000203 9feb      	MUL  R30,R27
000204 0df0      	ADD  R31,R0
000205 9fea      	MUL  R30,R26
000206 2de0      	MOV  R30,R0
000207 0df1      	ADD  R31,R1
000208 9508      	RET
                 
                 __MULB1W2U:
000209 2f6e      	MOV  R22,R30
00020a 9f6a      	MUL  R22,R26
00020b 01f0      	MOVW R30,R0
00020c 9f6b      	MUL  R22,R27
00020d 0df0      	ADD  R31,R0
00020e 9508      	RET
                 
                 __DIVW21U:
00020f 2400      	CLR  R0
000210 2411      	CLR  R1
000211 e190      	LDI  R25,16
                 __DIVW21U1:
000212 0faa      	LSL  R26
000213 1fbb      	ROL  R27
000214 1c00      	ROL  R0
000215 1c11      	ROL  R1
000216 1a0e      	SUB  R0,R30
000217 0a1f      	SBC  R1,R31
000218 f418      	BRCC __DIVW21U2
000219 0e0e      	ADD  R0,R30
00021a 1e1f      	ADC  R1,R31
00021b c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00021c 60a1      	SBR  R26,1
                 __DIVW21U3:
00021d 959a      	DEC  R25
00021e f799      	BRNE __DIVW21U1
00021f 01fd      	MOVW R30,R26
000220 01d0      	MOVW R26,R0
000221 9508      	RET
                 
                 __MODW21U:
000222 dfec      	RCALL __DIVW21U
000223 01fd      	MOVW R30,R26
000224 9508      	RET
                 
                 __SAVELOCR6:
000225 935a      	ST   -Y,R21
                 __SAVELOCR5:
000226 934a      	ST   -Y,R20
                 __SAVELOCR4:
000227 933a      	ST   -Y,R19
                 __SAVELOCR3:
000228 932a      	ST   -Y,R18
                 __SAVELOCR2:
000229 931a      	ST   -Y,R17
00022a 930a      	ST   -Y,R16
00022b 9508      	RET
                 
                 __LOADLOCR6:
00022c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00022d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00022e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00022f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000230 8119      	LDD  R17,Y+1
000231 8108      	LD   R16,Y
000232 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000233 0fac      	ADD  R26,R28
000234 1fbd      	ADC  R27,R29
                 __INITLOC0:
000235 9005      	LPM  R0,Z+
000236 920d      	ST   X+,R0
000237 958a      	DEC  R24
000238 f7e1      	BRNE __INITLOC0
000239 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  26 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  26 r17:  19 r18:  22 r19:  15 r20:   7 r21:   5 r22:   5 r23:   0 
r24:  11 r25:   5 r26:  44 r27:  23 r28:   7 r29:   2 r30: 139 r31:  40 
x  :   5 y  :  76 z  :  10 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   8 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  21 
cbi   :   8 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   6 cpi   :   4 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  24 ld    :   6 ldd   :  27 ldi   : 103 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   3 movw  :  23 
mul   :   9 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  33 pop   :   0 push  :   0 rcall :  49 ret   :  21 
reti  :   0 rjmp  :  17 rol   :   3 ror   :   0 sbc   :   5 sbci  :   7 
sbi   :  11 sbic  :   4 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  15 std   :  35 sts   :   0 sub   :   5 subi  :   8 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000474   1112     28   1140   16384   7.0%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
